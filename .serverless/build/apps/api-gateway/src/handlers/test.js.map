{
  "version": 3,
  "sources": ["../../../../../../apps/api-gateway/src/handlers/test.ts", "../../../../../../libs/lambda-utils/src/response/cors.utils.ts", "../../../../../../libs/lambda-utils/src/response/response.utils.ts", "../../../../../../libs/lambda-utils/src/error/error-handling.ts", "../../../../../../libs/lambda-utils/src/validation/http-method.validator.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport {\n  createResponse,\n  createErrorResponse,\n  validateHttpMethodWithCors,\n  createCorsPreflightResponse,\n} from '@tendo-app/lambda-utils';\n\nexport const main = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { isValid, isOptions } = validateHttpMethodWithCors(event, 'GET');\n\n    if (isOptions) {\n      return createCorsPreflightResponse(['GET']);\n    }\n\n    if (!isValid) {\n      return createErrorResponse(405, 'Method not allowed');\n    }\n\n    const response = {\n      message: 'Hello from Lambda!!',\n      timestamp: new Date().toISOString(),\n      requestId: event.requestContext.requestId,\n    };\n\n    return createResponse(200, response);\n  } catch (error) {\n    console.error('Handler error:', error);\n    return createErrorResponse(500, 'Internal server error');\n  }\n};\n", "export const getCorsHeaders = () => ({\n  'Access-Control-Allow-Origin': process.env['CORS_ORIGIN'] || '*',\n  'Access-Control-Allow-Credentials': 'true',\n  'Access-Control-Allow-Headers':\n    'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\n  'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\n});\n\nexport const createCorsPreflightResponse = (\n  allowedMethods: string[] = ['GET', 'POST', 'PUT', 'DELETE']\n) => ({\n  statusCode: 200,\n  headers: {\n    ...getCorsHeaders(),\n    'Access-Control-Allow-Methods': allowedMethods.join(', '),\n    'Access-Control-Max-Age': '86400',\n  },\n  body: '',\n});\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { APIGatewayProxyResult } from 'aws-lambda';\nimport { getCorsHeaders } from './cors.utils';\nconst crypto = require('crypto');\n\nexport const createResponse = (\n  statusCode: number,\n  body: any,\n  additionalHeaders?: Record<string, string>\n): APIGatewayProxyResult => ({\n  statusCode,\n  headers: {\n    'Content-Type': 'application/json',\n    ...getCorsHeaders(),\n    'X-Request-ID': crypto.randomUUID(),\n    ...additionalHeaders,\n  },\n  body: JSON.stringify(body),\n});\n", "import { APIGatewayProxyResult } from 'aws-lambda';\nimport { createResponse } from '../response';\n\nexport const createErrorResponse = (\n  statusCode: number,\n  message: string,\n  details?: any\n): APIGatewayProxyResult =>\n  createResponse(statusCode, {\n    error: message,\n    statusCode,\n    timestamp: new Date().toISOString(),\n    ...(details && { details }),\n  });\n", "import { APIGatewayProxyEvent } from 'aws-lambda';\n\nexport const validateHttpMethod = (\n  event: APIGatewayProxyEvent,\n  allowedMethod: string | string[]\n): boolean => {\n  const eventMethod = event.httpMethod?.toUpperCase();\n\n  if (!eventMethod) return false;\n\n  const allowed = Array.isArray(allowedMethod)\n    ? allowedMethod.map((method) => method.toUpperCase())\n    : [allowedMethod.toUpperCase()];\n\n  return allowed.includes(eventMethod);\n};\n\nexport const validateHttpMethodWithCors = (\n  event: APIGatewayProxyEvent,\n  allowedMethods: string | string[]\n): { isValid: boolean; isOptions: boolean } => {\n  const eventMethod = event.httpMethod?.toUpperCase();\n\n  if (!eventMethod) return { isValid: false, isOptions: false };\n\n  if (eventMethod === 'OPTIONS') return { isValid: true, isOptions: true };\n\n  const allowed = Array.isArray(allowedMethods)\n    ? allowedMethods.map((method) => method.toUpperCase())\n    : [allowedMethods.toUpperCase()];\n\n  return {\n    isValid: allowed.includes(eventMethod),\n    isOptions: false,\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,iBAAiB,OAAO;AAAA,EACnC,+BAA+B,QAAQ,IAAI,aAAa,KAAK;AAAA,EAC7D,oCAAoC;AAAA,EACpC,gCACE;AAAA,EACF,gCAAgC;AAClC;AAEO,IAAM,8BAA8B,CACzC,iBAA2B,CAAC,OAAO,QAAQ,OAAO,QAAQ,OACtD;AAAA,EACJ,YAAY;AAAA,EACZ,SAAS;AAAA,IACP,GAAG,eAAe;AAAA,IAClB,gCAAgC,eAAe,KAAK,IAAI;AAAA,IACxD,0BAA0B;AAAA,EAC5B;AAAA,EACA,MAAM;AACR;;;ACfA,IAAM,SAAS,QAAQ,QAAQ;AAExB,IAAM,iBAAiB,CAC5B,YACA,MACA,uBAC2B;AAAA,EAC3B;AAAA,EACA,SAAS;AAAA,IACP,gBAAgB;AAAA,IAChB,GAAG,eAAe;AAAA,IAClB,gBAAgB,OAAO,WAAW;AAAA,IAClC,GAAG;AAAA,EACL;AAAA,EACA,MAAM,KAAK,UAAU,IAAI;AAC3B;;;ACfO,IAAM,sBAAsB,CACjC,YACA,SACA,YAEA,eAAe,YAAY;AAAA,EACzB,OAAO;AAAA,EACP;AAAA,EACA,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EAClC,GAAI,WAAW,EAAE,QAAQ;AAC3B,CAAC;;;ACII,IAAM,6BAA6B,CACxC,OACA,mBAC6C;AAC7C,QAAM,cAAc,MAAM,YAAY,YAAY;AAElD,MAAI,CAAC,YAAa,QAAO,EAAE,SAAS,OAAO,WAAW,MAAM;AAE5D,MAAI,gBAAgB,UAAW,QAAO,EAAE,SAAS,MAAM,WAAW,KAAK;AAEvE,QAAM,UAAU,MAAM,QAAQ,cAAc,IACxC,eAAe,IAAI,CAAC,WAAW,OAAO,YAAY,CAAC,IACnD,CAAC,eAAe,YAAY,CAAC;AAEjC,SAAO;AAAA,IACL,SAAS,QAAQ,SAAS,WAAW;AAAA,IACrC,WAAW;AAAA,EACb;AACF;;;AJ3BO,IAAM,OAAO,OAClB,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,SAAS,UAAU,IAAI,2BAA2B,OAAO,KAAK;AAEtE,QAAI,WAAW;AACb,aAAO,4BAA4B,CAAC,KAAK,CAAC;AAAA,IAC5C;AAEA,QAAI,CAAC,SAAS;AACZ,aAAO,oBAAoB,KAAK,oBAAoB;AAAA,IACtD;AAEA,UAAM,WAAW;AAAA,MACf,SAAS;AAAA,MACT,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,WAAW,MAAM,eAAe;AAAA,IAClC;AAEA,WAAO,eAAe,KAAK,QAAQ;AAAA,EACrC,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AACrC,WAAO,oBAAoB,KAAK,uBAAuB;AAAA,EACzD;AACF;",
  "names": []
}
